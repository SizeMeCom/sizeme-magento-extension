<?php
/**
 * Magento
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * http://opensource.org/licenses/osl-3.0.php
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@magentocommerce.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade Magento to newer
 * versions in the future. If you wish to customize Magento for your
 * needs please refer to http://www.magentocommerce.com for more information.
 *
 * @category  SizeMe
 * @package   SizeMe_Measurements
 * @author    SizeMe Ltd <magento@sizeme.com>
 * @copyright Copyright (c) 2015 SizeMe Ltd (http://www.sizeme.com/)
 * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
?>

<?php
/**
 * This template is overridden in order to add a CSS class to the "size"
 * attribute <select> element. This selector is
 * required by SizeMe to work.
 * You can toggle the override in the SizeMe extension system config if you
 * wish to use your own template.
 *
 * @see SizeMe_Measurements_Model_Observer::onCoreBlockAbstractToHtmlBefore
 *
 * @var $this Mage_Catalog_Block_Product_View_Type_Configurable
 * @var $_attribute Mage_Catalog_Model_Product_Type_Configurable_Attribute
 * @var $_product Mage_Catalog_Model_Product
 * @var $_attributes Mage_Catalog_Model_Resource_Product_Type_Configurable_Attribute_Collection
 * @var $sizeMeHelper SizeMe_Measurements_Helper_Data
 */
$_product    = $this->getProduct();
$_attributes = Mage::helper('core')->decorateArray($this->getAllowAttributes());
$_jsonConfig = $this->getJsonConfig();
$_renderers  = ($_attrRenderers = $this->getChild('attr_renderers'))
    ? $_attrRenderers->getSortedChildren()
    : array();
$sizeMeHelper = Mage::helper('sizeme_measurements');
?>
<?php if ($_product->isSaleable() && count($_attributes)):?>
    <dl>
        <?php foreach($_attributes as $_attribute): ?>
            <?php
            $_rendered = false;
            foreach ($_renderers as $_rendererName):
                $_renderer = $this->getChild('attr_renderers')->getChild($_rendererName);
                if (method_exists($_renderer, 'shouldRender') && $_renderer->shouldRender($_attribute, $_jsonConfig)):
                    $_renderer->setProduct($_product);
                    $_renderer->setAttributeObj($_attribute);
                    echo $_renderer->toHtml();
                    $_rendered = true;
                    break;
                endif;
            endforeach;

            if (!$_rendered):
                $sizeMeClass = $sizeMeHelper->isSizeAttribute($_attribute)
                    ? 'sizeme-magento-size-selector'
                    : '';
                ?>
                <dt><label class="required"><em>*</em><?php echo $_attribute->getLabel() ?></label></dt>
                <dd<?php if ($_attribute->decoratedIsLast){?> class="last"<?php }?>>
                    <div class="input-box">
                        <select name="super_attribute[<?php echo $_attribute->getAttributeId() ?>]" id="attribute<?php echo $_attribute->getAttributeId() ?>" 
								class="required-entry super-attribute-select <?php echo $sizeMeClass; ?>">
                            <option><?php echo $this->__('Choose an Option...') ?></option>
                        </select>
                    </div>
                </dd>
            <?php endif; ?>
        <?php endforeach; ?>
    </dl>
    <script type="text/javascript">
        var spConfig = new Product.Config(<?php echo $_jsonConfig ?>);
    </script>
    <?php echo $this->getChildHtml('after') ?>
<?php endif;?>
