<?php
/**
 * Magento
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * http://opensource.org/licenses/osl-3.0.php
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@magentocommerce.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade Magento to newer
 * versions in the future. If you wish to customize Magento for your
 * needs please refer to http://www.magentocommerce.com for more information.
 *
 * @category  SizeMe
 * @package   SizeMe_Measurements
 * @author    SizeMe Ltd <plugins@sizeme.com>
 * @copyright Copyright (c) SizeMe Ltd (https://www.sizeme.com/)
 * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
?>

<?php
/**
 * @var $this SizeMe_Measurements_Block_Catalog_Product_View_Content
 */
$product = $this->getProduct();
$type = trim((string)$product->getSmiItemType());

?>

<script type="text/javascript">
  //<![CDATA[
  var sizeme_product = {
<?php
if ($type) :
?>
<?php
// if the itemType code exists,
// check its contents to see if it's
// A) a actual itemType code (x.x.x.x.x.x.x where x is an integer) -> write local DB version
// B) else write template product DB type
?>
<?php
  if (is_numeric(str_replace('.','',$type))) :
    $layer = (int)$product->getSmiItemLayer();
    $thickness = (int)$product->getSmiItemThickness();
    $stretch = (int)$product->getSmiItemStretch();
    $recommendation = (int)$product->getSmiItemFitRecommendation();
?>
      name: "<?php echo $this->quoteEscape($product->getName()); ?>",
      item: {
        itemType: "<?php echo $type; ?>",
        itemLayer: <?php echo $layer; ?>,
        itemThickness: <?php echo $thickness; ?>,
        itemStretch:  <?php echo $stretch; ?>,
        fitRecommendation: <?php echo $recommendation; ?>,
        measurements: {
<?php foreach ($this->getVariations($product) as $code => $variation): ?>
          "<?php echo (int)$code; ?>": {
<?php foreach ($this->getVariationSizeMeAttributes($variation) as $name => $value): ?>
            "<?php echo $this->quoteEscape($name); ?>": <?php echo(int)$value; ?>,
<?php endforeach; ?>
          },
<?php endforeach; ?>
        }
      }
<?php
  else: ?>
<?php
      // write version for templated use of SizeMe Product Database
?>
      name: "<?php echo $this->quoteEscape($product->getName()); ?>",
      SKU: "<?php echo $this->quoteEscape($type); ?>",
      item: {
<?php foreach ($this->getVariations($product) as $code => $variation):
  $size = $this->getSizeAttributeValueLabels($variation);
?>
          "<?php echo $this->quoteEscape($type.'_'.$size); ?>": "<?php echo (int)$code; ?>",
<?php endforeach; ?>
      }
<?php
  endif;
?>
<?php
else:
?>
<?php
  // else write version to use SKU's to find this one in the universal SizeMe Product Database
?>
    name: "<?php echo $this->quoteEscape($product->getName()); ?>",
    SKU: "<?php echo $this->quoteEscape($product->getSKU()); ?>",
    item: {
<?php foreach ($this->getVariations($product) as $code => $variation): ?>
        "<?php echo $this->quoteEscape($variation->getSKU()); ?>": "<?php echo (int)$code; ?>",
<?php endforeach; ?>
    }
<?php
endif;
?>
  };
  //]]>
</script>
