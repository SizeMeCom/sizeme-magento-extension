<?php
/**
 * Magento
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * http://opensource.org/licenses/osl-3.0.php
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@magentocommerce.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade Magento to newer
 * versions in the future. If you wish to customize Magento for your
 * needs please refer to http://www.magentocommerce.com for more information.
 *
 * @category  SizeMe
 * @package   SizeMe_Measurements
 * @author    SizeMe Ltd <plugins@sizeme.com>
 * @copyright Copyright (c) 2017 SizeMe Ltd (https://www.sizeme.com/)
 * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
?>

<?php
/**
 * @var $this SizeMe_Measurements_Block_Catalog_Product_View_Content
 */
$product = $this->getProduct();

$type = trim((string)$product->getSmiItemType());
/** @var SizeMe_Measurements_Helper_Data $helper */
$helper = Mage::helper('sizeme_measurements');
?>

<script type="text/javascript">
    //<![CDATA[
    var sizeme_product = {
	<?php if ($type) : ?>
		<?php
		// if itemType code exists, write local DB version
		?>
		<?php
			$layer = (int)$product->getSmiItemLayer();
			$thickness = (int)$product->getSmiItemThickness();
			$stretch = (int)$product->getSmiItemStretch();
			$recommendation = (int)$product->getSmiItemFitRecommendation();
		?>
			name: "<?php echo $this->jsQuoteEscape($product->getName()); ?>",
			item: new SizeMe.Item("<?php echo $type; ?>", <?php echo $layer; ?>, <?php echo $thickness; ?>, <?php echo $stretch; ?>, <?php echo $recommendation; ?>)
		<?php foreach ($this->getVariations($product) as $variation): ?>
			.addSize("<?php echo (int)$helper->getSizeAttributeValue($variation); ?>", new SizeMe.Map()
			<?php foreach ($this->getVariationSizeMeAttributes($variation) as $name => $value): ?>
				.addItem("<?php echo $this->jsQuoteEscape($name); ?>", <?php echo(int)$value; ?>)
			<?php endforeach; ?>
			)
		<?php endforeach; ?>
	<?php else: ?>	
		<?php
		// else write version to use SKU's to find this one in the universal SizeMe Product Database
		?>
		name: "<?php echo $this->jsQuoteEscape($product->getName()); ?>",
		SKU: "<?php echo $this->jsQuoteEscape($product->getSKU()); ?>",
		item: {
			<?php foreach ($this->getVariations($product) as $variation): ?>
				"<?php echo $this->jsQuoteEscape($variation->getSKU()); ?>": "<?php echo (int)$helper->getSizeAttributeValue($variation); ?>",
			<?php endforeach; ?>
		}
	<?php endif; ?>
    };
    //]]>
</script>
